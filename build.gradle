buildscript {
    apply from: rootProject.file("dependencies.gradle")
    repositories {
        jcenter()
        google()
        maven { url "https://plugins.gradle.org/m2/" }
        // Remove once butterknife is updated to a stable version
        // TODO: https://github.com/uber/okbuck/issues/570
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath deps.build.androidPlugin
        classpath deps.build.butterKnifePlugin
        classpath deps.build.kotlinPlugin
        classpath deps.build.kotlinAllOpen
        classpath deps.build.sqlDelightPlugin
        classpath deps.build.shadowJar
    }
}

allprojects { project ->
    project.apply from: rootProject.file("dependencies.gradle")
    repositories {
        jcenter()
        google()
        maven { url "https://plugins.gradle.org/m2/" }
        // Remove once butterknife is updated to a stable version
        // TODO: https://github.com/uber/okbuck/issues/570
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
}

apply plugin: "com.uber.okbuck"

subprojects { project ->
    afterEvaluate {
        if (project.plugins.hasPlugin("java")) {
            addCommonConfigurationForJavaModules(project)
        } else if (project.plugins.hasPlugin("com.android.application")
                || project.plugins.hasPlugin("com.android.library")) {
            addCommonConfigurationForAndroidModules(project)
        }

        project.tasks.withType(Test) { Test task ->
            task.jvmArgs << "-Djava.awt.headless=true"
        }
    }
}

def addCommonConfigurationForJavaModules(Project project) {
    project.sourceCompatibility = JavaVersion.VERSION_1_8
    project.targetCompatibility = JavaVersion.VERSION_1_8
}

def addCommonConfigurationForAndroidModules(Project project) {
    project.android {
        compileSdkVersion config.build.compileSdk
        buildToolsVersion config.build.buildTools

        defaultConfig {
            minSdkVersion config.build.minSdk
            targetSdkVersion config.build.targetSdk
            vectorDrawables.useSupportLibrary = true
            versionCode 1
            versionName "1.0"
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        lintOptions {
            lintConfig project.rootProject.file("config/lint/lint.xml")
        }
    }

    def variants
    if (project.plugins.hasPlugin("com.android.application")) {
        project.android {
            signingConfigs {
                debug {
                    storeFile project.rootProject.file("config/signing/debug.keystore")
                }
            }
            buildTypes {
                debug {
                    signingConfig signingConfigs.debug
                }
                release {
                    signingConfig signingConfigs.debug
                }
            }
        }
        variants = project.android.applicationVariants
    } else {
        variants = project.android.libraryVariants
    }

    if (project.plugins.hasPlugin("com.squareup.sqldelight")) {
        variants.all {
            Task okbuckTask = project.tasks.getByName("okbuck")
            Task sqlDelightTask = project.tasks.getByName("generate${it.name.capitalize()}SqlDelightInterface")
            okbuckTask.dependsOn(sqlDelightTask)
            project.android.sourceSets."${it.name}".java.srcDirs += [sqlDelightTask.outputs.files[0] as String]
        }
    }
}

okbuck {
    buildToolVersion = config.build.buildTools
    target = "android-${config.build.compileSdk}"

    primaryDexPatterns = [
            "app": [
                    "^com/uber/okbuck/example/AppShell^",
                    "^com/uber/okbuck/example/BuildConfig^",
                    "^android/support/multidex/",
                    "^com/facebook/buck/android/support/exopackage/",
                    "^com/github/promeg/xlog_android/lib/XLogConfig^",
                    "^com/squareup/leakcanary/LeakCanary^",
                    "^com/uber/okbuck/example/common/Calc^",
                    "^com/uber/okbuck/example/common/BuildConfig^",
            ]
    ]
    exopackage = [
            "appDevDebug": true
    ]
    appLibDependencies = [
            "appProd": [
                    "buck-android-support",
                    "com.android.support:multidex",
                    "libraries/javalibrary:main",
                    "libraries/common:paidRelease",
            ],
            "appDev" : [
                    "buck-android-support",
                    "com.android.support:multidex",
                    "libraries/javalibrary:main",
                    "libraries/common:freeDebug",
            ],
            "appDemo": [
                    "buck-android-support",
                    "com.android.support:multidex",
                    "libraries/javalibrary:main",
                    "libraries/common:paidRelease",
            ]
    ]
    buckProjects = project.subprojects.findAll { it.name != "plugin" && it.name != "transform-cli" }

    intellij {
        sources = true
    }

    test {
        espresso = true
        robolectric = true
    }

    wrapper {
        watch += ["**/*.sq"]
    }

    kotlin {
        version = deps.versions.kotlin
    }

    lint {
        version = deps.versions.androidTools
        jvmArgs = '-Xmx1g'
    }

    experimental {
        transform = true
    }

    transform {
        transforms = [
                "appProd": [
                        [transform: "com.uber.okbuck.transform.DummyTransform"]
                ]

        ]
    }

    external {
        allowed = [
                "com.android.support:support-annotations": [],
                "com.android.tools.build:builder-model": [],
                "com.android.tools.build:builder-test-api": [],
                "com.android.tools.build:manifest-merger": [],
                "com.android.tools.ddms:ddmlib": [],
                "com.android.tools.layoutlib:layoutlib-api": [],
                "com.android.tools:annotations": [],
                "com.android.tools:common": [],
                "com.android.tools:dvlib": [],
                "com.android.tools:repository": [],
                "com.android.tools:sdk-common": [],
                "com.android.tools:sdklib": [],
                "com.google.auto.value:auto-value": [],
                "com.google.auto:auto-common": [],
                "com.google.code.findbugs:jsr305": [],
                "com.google.code.gson:gson": [],
                "com.google.errorprone:error_prone_annotations": [],
                "com.google.guava:guava": [],
                "com.google.protobuf:protobuf-java": [],
                "com.squareup:javapoet": [],
                "com.squareup:javawriter": [],
                "commons-codec:commons-codec": [],
                "commons-logging:commons-logging": [],
                "org.apache.commons:commons-compress": [],
                "org.apache.httpcomponents:httpclient": [],
                "org.apache.httpcomponents:httpcore": [],
                "org.apache.httpcomponents:httpmime": [],
                "org.bouncycastle:bcprov-jdk15on": [],
                "org.checkerframework:checker-compat-qual": [],
                "org.jetbrains.kotlin:kotlin-reflect": [],
                "org.jetbrains.kotlin:kotlin-stdlib": [],
                "org.ow2.asm:asm": [],
                "org.ow2.asm:asm-analysis": [],
                "org.ow2.asm:asm-commons": [],
                "org.ow2.asm:asm-tree": [],
                "org.robolectric:android-all": [],
        ]
    }

    dependencies {
        transform project(":dummy-transform")
    }

    extraDefs += project.file("tooling/buck-defs/DEFS")
    libraryBuildConfig = false

    extraBuckOpts = [
            "appDebug": [
                    "android_binary": [
                            "trim_resource_ids = True"
                    ]
            ]
    ]
}

gradle.buildFinished {
    "zip -d .okbuck/cache/org.hamcrest--hamcrest-core--1.3.jar__ LICENSE.txt".execute()
    "zip -d .okbuck/cache/org.hamcrest--hamcrest-library--1.3.jar LICENSE.txt".execute()
    "zip -d .okbuck/cache/org.hamcrest--hamcrest-integration--1.3.jar LICENSE.txt".execute()
}
